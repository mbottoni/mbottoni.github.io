# matklad @ NEAR

Hey, I have a short announcement to make: I am joining [NEAR](https://near.org) (sharded proof of stake public blockchain)!
TL;DR: I'll be spending 60% of my time on WASM runtime for smart contracts and 40% on rust-analyzer.

Why NEAR?
One of the problems I have with current popular blockchain technologies is that they are not scalable.
Every node needs to process every transaction in the network.
For a network of with `N` nodes that is roughly `O(N^2)` total work.
NEAR aims to solve exactly this problem using the classic big data trick --- sharding the data across several partitions.

Another aspect of NEAR I am particularly excited about is the strategic focus on the smart contract's developer experience.
That's why NEAR is particularly interested in supporting rust-analyzer.
Rust, with its top-notch WASM ecosystem and focus on correctness is a natural choice for writing contracts.
At the same time, it is not the most approachable language there is.
Good tooling can help a lot with surmounting the language's inherent complexity, making writing smart contracts in Rust easy.

What does it mean for rust-analyzer?
We'll see: I am still be putting significant hours into it, although a bit less than previously.
I'll also help to manage rust-analyzer [Open Collective](https://opencollective.com/rust-analyzer).
And, naturally, my know-how about building IDEs isn't going anywhere :)
At the same time, I am excited about lowering the bus factor and distributing rust-analyzer maintainership.
I do want to take credit for initiating the effort, but it's high time for some structured leadership rotation.
It's exciting to see [@jonas-schievink](https://github.com/jonas-schievink) from [Ferrous System](https://ferrous-systems.com) taking on more team leadership tasks.
(I am hyped about support for inner items, kudos Jonas!)
I am also delighted with the open source community that formed around rust-analyzer.
[@edwin0cheng](https://github.com/edwin0cheng),
[@flodiebold](https://github.com/flodiebold),
[@kjeremy](https://github.com/kjeremy),
[@lnicola](https://github.com/lnicola),
[@SomeoneToIgnore](https://github.com/SomeoneToIgnore),
[@Veetaha](https://github.com/Veetaha),
[@Veykril](https://github.com/Veykril)
you are awesome, and rust-analyzer wouldn't be possible without you ❤️

Finally, I can't help but notice that IntelliJ Rust which I left completely a while ago is doing better than ever.
Overall, I must say I _am_ quite happy with today's state of Rust IDE tooling.
The basics are firmly in place.
Let's just finish the remaining 90%!
